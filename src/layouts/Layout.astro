---
import "../styles/global.css";

interface Props {
  title?: string;
  description?: string;
}

const { title = "Угольников Даниил - Портфолио", description = "Мое портфолио" } =
  Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'%3E%3Ctext y='50' font-size='48'%3E%F0%9F%92%BC%3C/text%3E%3C/svg%3E" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body
    class="min-h-screen bg-background font-sans antialiased selection:bg-purple-500/20 selection:text-purple-500"
  >
    <div
      class="fixed inset-0 -z-10 h-full w-full bg-background bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"
    >
    </div>
    <div id="app-loader" class="fixed inset-0 z-50 flex items-center justify-center bg-background">
      <div class="relative w-16 h-16">
        <div class="absolute inset-0 rounded-full border-4 border-purple-400/30"></div>
        <div class="absolute inset-0 rounded-full border-4 border-purple-500 border-t-transparent animate-spin" style="animation-duration: 1s"></div>
        <div class="absolute inset-2 rounded-full border-4 border-pink-500/60 border-b-transparent animate-spin" style="animation-duration: 1.5s"></div>
      </div>
    </div>
    <slot />
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }

  // Убираем лоадер после загрузки контента
  const hideLoader = () => {
    const el = document.getElementById('app-loader');
    if (!el) return;
    el.style.opacity = '0';
    el.style.transition = 'opacity 300ms ease';
    setTimeout(() => el.remove(), 320);
  };
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    requestAnimationFrame(hideLoader);
  } else {
    window.addEventListener('DOMContentLoaded', hideLoader);
  }
</script>

<style>
  html,
  body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    scroll-behavior: smooth;
  }

  :root {
    --transition-standard: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  body {
    transition:
      background-color var(--transition-standard),
      color var(--transition-standard);
  }

  #app-loader {
    backdrop-filter: blur(6px);
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>
